<?php
/**
 * There are three parts to the Domain Mapping single-sign on;
 *
 * 1) the JavaScript include on the header for each blog accessed through domain
 *    mapping.
 * 2) Create an authentication token and then redirect back to the mapped domain.
 * 3) Validate the token and then login the user with that token.
 *
 * The authentication token has to be created on the WordPress Network domian
 * and **NOT** the mapped domain. This is because the process uses Third Party
 * cookies and therefore the user is logged in on the WordPress Network domain.
 * Therefore an authentication token can only be generated by the WordPress
 * Network domain.
 *
 * The token is then provided in a URL request to the mapped domain blog and
 * then the token is used to create an session cookie to login the user.
 */
defined( 'ABSPATH' ) or die();

/**
 * Stage 1) Create a JavaScript include in the header of the domain mapped
 * website. This checks to make sure the User is logged into WordPress before
 * including the header otherwise people will end up in an infinite loop.
 */
function dark_matter_sso_wp_head() {
	if ( false === is_user_logged_in() && false === is_main_site() ) : ?>
	<script type="text/javascript" src="<?php echo( network_site_url( '/wp-login.php?action=dmsso' ) ); ?>"></script>
<?php endif;
}
add_action( 'wp_head', 'dark_matter_sso_wp_head' );

/**
 * Stage 2) Create an authentication token and pass it back to the mapped domain
 * blog.
 */
function dark_matter_sso_create_token() {
	if ( 'dmsso' === filter_input( INPUT_GET, 'action' ) ) {
		header( 'Content-Type: text/javascript' );

		/**
		 * Construct an authentication token which is passed back along with an
		 * action flag to tell the front end to
		 */
		$url = add_query_arg( array(
			'__dm_action' => 'authorise',
			'auth' => wp_generate_auth_cookie( get_current_user_id(), time() + ( 2 * MINUTE_IN_SECONDS ) )
		), $_SERVER['HTTP_REFERER'] );

		printf( 'window.location.replace( "%1$s" );', esc_url_raw( $url ) );

		/**
		 * End the request here as we do not want to process the rest of the
		 * wp-login.php page as it is not needed.
		 */
		die();
	}
}
add_action( 'login_init', 'dark_matter_sso_create_token' );

/**
 * Stage 3) Validate the authentication token and log the User in.
 */
function dark_matter_validate_sso_validate_token() {
	/**
	 * First check to see if the authorise action is provided in the URL.
	 */
	if ( 'authorise' === filter_input( INPUT_GET, '__dm_action' ) ) {
		/**
		 * Validate the token provided in the URL.
		 */
		$user_id = wp_validate_auth_cookie( filter_input( INPUT_GET, 'auth' ), 'auth' );

		/**
		 * Check if the validate token worked and we have a User ID. It will
		 * display an error message or login the User if all works out well.
		 */
		if ( false === $user_id ) {
			wp_die( 'Oops! Something went wrong with logging in.' );
		}
		else {
			/**
			 * Create the Login session cookie and redirect the user to the
			 * current page with the URL querystrings for Domain Mapping SSO
			 * removed.
			 */
			wp_set_auth_cookie( $user_id );
			wp_redirect( esc_url( remove_query_arg( array( '__dm_action', 'auth' ) ) ) );

			die();
		}
	}
}
add_action( 'plugins_loaded', 'dark_matter_validate_sso_validate_token' );
